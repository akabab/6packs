{"version":3,"sources":["db.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","process","projectId","concat","authDomain","databaseURL","storageBucket","firebase","initializeApp","db","firestore","settings","timestampsInSnapshots","enablePersistence","addItem","list","item","quantity","arguments","length","undefined","collection","doc","id","snakeCase","set","belongsTo","value","archived","updateItem","updates","_ref","update","deleteItems","items","batch","forEach","delete","commit","Item","react_default","a","createElement","className","onClick","e","Edit","_ref2","App","state","inputValue","isModeEdition","toggleMode","_this","setState","handleSubmit","preventDefault","handleChange","target","listRef","_do","_this2","this","props","listId","unsubscribe","where","orderBy","onSnapshot","snap","docs","map","Object","objectSpread","ref","data","_this3","_this$state","onSubmit","type","onChange","filter","i","App_Item","key","Component","Boolean","window","location","hostname","match","console","log","v","public_url","Home","ReactDOM","render","es","basepath","src_Home","path","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0b23885.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport snakeCase from 'lodash/snakeCase'\n\nconst apiKey = process.env.REACT_APP_FIREBASE_API_KEY || console.error('REACT_APP_FIREBASE_API_KEY not defined')\nconst projectId = process.env.REACT_APP_FIREBASE_PROJECT_ID || console.error('REACT_APP_FIREBASE_PROJECT_ID not defined')\n\nconst config = {\n  apiKey: apiKey,\n  projectId: `${projectId}`,\n  authDomain: `${projectId}.firebaseapp.com`,\n  databaseURL: `https://${projectId}.firebaseio.com`,\n  storageBucket: `${projectId}.appspot.com`,\n}\nfirebase.initializeApp(config)\n\nexport const db = firebase.firestore()\ndb.settings({ timestampsInSnapshots: true })\ndb.enablePersistence()\n\n// helpers\n\nexport const getList = id => db.collection('lists').doc(id)\n\nexport const getItems = listRef => db.collection('items')\n  .where('belongsTo', '==', listRef)\n  .get()\n  .then(snap => snap.docs.map(doc => ({ id: doc.id, _ref: doc.ref, ...doc.data() })))\n\nexport const addItem = (list, item, quantity = 1) =>\n  db.collection('items').doc(`${list.id}-${snakeCase(item)}`).set({\n    belongsTo: list,\n    value: item,\n    quantity,\n    archived: false\n  })\n\nexport const updateItem = (item, updates) => item._ref.update(updates)\n\nexport const deleteItem = item => item._ref.delete()\n\nexport const deleteItems = items => {\n  const batch = db.batch()\n\n  items.forEach(item => batch.delete(item._ref))\n  return batch.commit()\n}\n\nexport const onListUpdate = (listRef, _do) => db.collection('items')\n  .where('belongsTo', '==', listRef)\n  .orderBy('value')\n  .onSnapshot(snap => {\n    const items = snap.docs.map(doc => ({ id: doc.id, _ref: doc.ref, ...doc.data() }))\n\n    _do(items)\n  })\n","import React, { Component } from 'react'\nimport { Route } from '@reach/router'\n\nimport * as db from './db'\nimport './App.css'\n\nconst Item = ({ item }) =>\n  <li>\n    <span>( {item.quantity} )</span>\n    <span className={item.archived ? 'line' : ''} onClick={e => db.updateItem(item, { archived: !item.archived })}> {item.value} </span>\n  </li>\n\nItem.Edit = ({ item }) =>\n  <li>\n    <button onClick={e => db.updateItem(item, { quantity: item.quantity - 1 })}>-</button>\n    <span>( {item.quantity} )</span>\n    <button onClick={e => db.updateItem(item, { quantity: item.quantity + 1 })}>+</button>\n    <span className={item.archived ? 'line' : ''} onClick={e => db.updateItem(item, { archived: !item.archived })}> {item.value} </span>\n    <button onClick={e => db.deleteItem(item)}>x</button>\n  </li>\n\nclass App extends Component {\n\n  state = {\n    list: undefined,\n    inputValue: '',\n    items: [],\n    isModeEdition: true\n  }\n\n  toggleMode = () => {\n    this.setState({ isModeEdition: !this.state.isModeEdition })\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n\n    db.addItem(this.state.list, this.state.inputValue)\n  }\n\n  handleChange = e => {\n    this.setState({ inputValue: e.target.value })\n  }\n\n  componentDidMount() {\n    const list = db.getList(this.props.listId)\n    this.setState({ list })\n\n    // update state when 'items' collection changes\n    this.unsubscribe = db.onListUpdate(list, items => this.setState({ items }))\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  render() {\n    const { listId } = this.props\n    const { list, items } = this.state\n      // .sort((a, b) => a.value.localeCompare(b.value))\n\n    return (\n      <div className=\"App\">\n        <h2>Shopping list \"{listId}\"</h2>\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" value={this.state.inputValue} onChange={this.handleChange} />\n          <input type=\"submit\" value=\"add\" />\n        </form>\n        <button onClick={() => db.deleteItems(items.filter(i => i.archived))}>clear dones</button>\n        <button onClick={() => db.deleteItems(items)}>clear all</button>\n        <button onClick={this.toggleMode}>Mode: {this.state.isModeEdition ? 'EDIT' : 'READ' }</button>\n        <ul>\n          { items.map(item => this.state.isModeEdition\n              ? <Item.Edit key={item.id} item={item} />\n              : <Item key={item.id} item={item} />\n            )\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Router, Link } from '@reach/router'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconsole.log({ v: 1, public_url: process.env.PUBLIC_URL })\n\nconst Home = () => <div>Home</div>\n\nconst Root = () => (\n  <Router basepath='pouet'>\n    <Home path=\"/\" />\n    <App path=\"/:listId\" />\n  </Router>\n)\n\nReactDOM.render(<Root />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}