{"version":3,"sources":["db.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","process","projectId","concat","authDomain","databaseURL","storageBucket","firebase","initializeApp","db","firestore","settings","timestampsInSnapshots","enablePersistence","id","addItem","list","item","quantity","arguments","length","undefined","collection","doc","snakeCase","set","belongsTo","value","archived","updateItem","updates","_ref","update","deleteItems","items","batch","forEach","delete","commit","listId","window","location","pathname","split","Item","react_default","a","createElement","className","onClick","e","Edit","_ref2","App","state","inputValue","isModeEdition","toggleMode","_this","setState","handleSubmit","preventDefault","handleChange","target","listRef","_do","_this2","this","unsubscribe","where","orderBy","onSnapshot","snap","docs","map","Object","objectSpread","ref","data","_this3","onSubmit","type","onChange","filter","i","App_Item","key","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4658a0f0.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport snakeCase from 'lodash/snakeCase'\n\nconst apiKey = process.env.REACT_APP_FIREBASE_API_KEY || console.error('REACT_APP_FIREBASE_API_KEY not defined')\nconst projectId = process.env.REACT_APP_FIREBASE_PROJECT_ID || console.error('REACT_APP_FIREBASE_PROJECT_ID not defined')\n\nconst config = {\n  apiKey: apiKey,\n  projectId: `${projectId}`,\n  authDomain: `${projectId}.firebaseapp.com`,\n  databaseURL: `https://${projectId}.firebaseio.com`,\n  storageBucket: `${projectId}.appspot.com`,\n}\nfirebase.initializeApp(config)\n\nexport const db = firebase.firestore()\ndb.settings({ timestampsInSnapshots: true })\ndb.enablePersistence()\n\n// helpers\n\nexport const getList = id => db.collection('lists').doc(id)\n\nexport const getItems = listRef => db.collection('items')\n  .where('belongsTo', '==', listRef)\n  .get()\n  .then(snap => snap.docs.map(doc => ({ id: doc.id, _ref: doc.ref, ...doc.data() })))\n\nexport const addItem = (list, item, quantity = 1) =>\n  db.collection('items').doc(`${list.id}-${snakeCase(item)}`).set({\n    belongsTo: list,\n    value: item,\n    quantity,\n    archived: false\n  })\n\nexport const updateItem = (item, updates) => item._ref.update(updates)\n\nexport const deleteItem = item => item._ref.delete()\n\nexport const deleteItems = items => {\n  const batch = db.batch()\n\n  items.forEach(item => batch.delete(item._ref))\n  return batch.commit()\n}\n\nexport const onListUpdate = (listRef, _do) => db.collection('items')\n  .where('belongsTo', '==', listRef)\n  .orderBy('value')\n  .onSnapshot(snap => {\n    const items = snap.docs.map(doc => ({ id: doc.id, _ref: doc.ref, ...doc.data() }))\n\n    _do(items)\n  })\n","import React, { Component } from 'react'\nimport * as db from './db'\nimport './App.css'\n\nconst listId = window.location.pathname.split('/')[1] || '_'\nconst list = db.getList(listId)\n\nconst Item = ({ item }) =>\n  <li>\n    <span>( {item.quantity} )</span>\n    <span className={item.archived ? 'line' : ''} onClick={e => db.updateItem(item, { archived: !item.archived })}> {item.value} </span>\n  </li>\n\nItem.Edit = ({ item }) =>\n  <li>\n    <button onClick={e => db.updateItem(item, { quantity: item.quantity - 1 })}>-</button>\n    <span>( {item.quantity} )</span>\n    <button onClick={e => db.updateItem(item, { quantity: item.quantity + 1 })}>+</button>\n    <span className={item.archived ? 'line' : ''} onClick={e => db.updateItem(item, { archived: !item.archived })}> {item.value} </span>\n    <button onClick={e => db.deleteItem(item)}>x</button>\n  </li>\n\nclass App extends Component {\n\n  state = {\n    inputValue: '',\n    items: [],\n    isModeEdition: true\n  }\n\n  toggleMode = () => {\n    this.setState({ isModeEdition: !this.state.isModeEdition })\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n\n    db.addItem(list, this.state.inputValue)\n  }\n\n  handleChange = e => {\n    this.setState({ inputValue: e.target.value })\n  }\n\n  componentDidMount() {\n    // update state when 'items' collection changes\n    this.unsubscribe = db.onListUpdate(list, items => this.setState({ items }))\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  render() {\n    const items = this.state.items\n      // .sort((a, b) => a.value.localeCompare(b.value))\n\n    return (\n      <div className=\"App\">\n        <h2>Shopping list \"{listId}\"</h2>\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" value={this.state.inputValue} onChange={this.handleChange} />\n          <input type=\"submit\" value=\"add\" />\n        </form>\n        <button onClick={() => db.deleteItems(items.filter(i => i.archived))}>clear dones</button>\n        <button onClick={() => db.deleteItems(items)}>clear all</button>\n        <button onClick={this.toggleMode}>Mode: {this.state.isModeEdition ? 'EDIT' : 'READ' }</button>\n        <ul>\n          { items.map(item => this.state.isModeEdition\n              ? <Item.Edit key={item.id} item={item} />\n              : <Item key={item.id} item={item} />\n            )\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}